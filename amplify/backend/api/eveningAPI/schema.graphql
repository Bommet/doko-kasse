schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Evening {
  Datum: String!
  hannes: Float
  jan: Float
  louisa: Float
  ole: Float
  semester: String!
  sonstige: Float
  tim: Float
}

type EveningConnection {
  items: [Evening]
  nextToken: String
}

type Mutation {
  createEvening(input: CreateEveningInput!): Evening
  deleteEvening(input: DeleteEveningInput!): Evening
  updateEvening(input: UpdateEveningInput!): Evening
}

type Query {
  getEvening(Datum: String!): Evening
  listEvenings(filter: TableEveningFilterInput, limit: Int, nextToken: String): EveningConnection
}

type Subscription {
  onCreateEvening(Datum: String, hannes: Float, louisa: Float, sonstige: Float, tim: Float): Evening
    @aws_subscribe(mutations: ["createEvening"])
  onDeleteEvening(Datum: String, hannes: Float, louisa: Float, sonstige: Float, tim: Float): Evening
    @aws_subscribe(mutations: ["deleteEvening"])
  onUpdateEvening(Datum: String, hannes: Float, louisa: Float, sonstige: Float, tim: Float): Evening
    @aws_subscribe(mutations: ["updateEvening"])
}

input CreateEveningInput {
  Datum: String!
  hannes: Float
  jan: Float
  louisa: Float
  ole: Float
  semester: String!
  sonstige: Float
  tim: Float
}

input DeleteEveningInput {
  Datum: String!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableEveningFilterInput {
  Datum: TableStringFilterInput
  hannes: TableFloatFilterInput
  jan: TableFloatFilterInput
  louisa: TableFloatFilterInput
  ole: TableFloatFilterInput
  semester: TableStringFilterInput
  sonstige: TableFloatFilterInput
  tim: TableFloatFilterInput
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateEveningInput {
  Datum: String!
  hannes: Float
  jan: Float
  louisa: Float
  ole: Float
  semester: String
  sonstige: Float
  tim: Float
}
